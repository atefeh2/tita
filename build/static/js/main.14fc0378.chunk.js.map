{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useStyles","makeStyles","root","color","background","border","float","fontsize","fontweight","lineheight","height","marginright","margintop","padding","width","reset","webkittransitionduration","transitionduration","backgroundcolor","textalign","borderradius","Square","value","onClick","classes","className","Restart","Game","useState","Array","fill","squares","setSquares","isXNext","setIsXNext","winner","possibleLines","i","length","a","b","c","calculateWinner","Fragment","Container","maxWidth","renderSquare","isBoardFull","nextSquares","slice","ReactDOM","render","document","getElementById","Boolean","window","location","hostname","match","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14fc0378.chunk.js","sourcesContent":["\r\n\r\nimport React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./App.css\";\r\nimport {Container,makeStyles} from '@material-ui/core';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction App (){\r\n\r\n  const useStyles = makeStyles (() =>({\r\n    root: {\r\n     \r\n      color: '424242',\r\n      background: '26a69a',\r\n      border: '4px solid #3F51B5',\r\n      float: 'left',\r\n      \r\n      fontsize: '96px',\r\n      fontweight: 'bold',\r\n      lineheight: '136px',\r\n      height: '136px',\r\n      marginright: '-1px',\r\n      margintop:'-1px',\r\n      padding: 0,\r\n      \r\n      width: '136px',\r\n\r\n    },\r\n    reset :{\r\n\r\n      webkittransitionduration:' 0.4s', \r\n      transitionduration: '0.4s',\r\n      backgroundcolor: 'black',\r\n      color: '212121',\r\n      border: 'none',\r\n      fontsize: '24px',\r\n      lineheight: '48px',\r\n      height: '48px',\r\n      width: '40%',\r\n      textalign: 'center',\r\n      borderradius: '4px',\r\n  \r\n\r\n   \r\n\r\n\r\n    },\r\n\r\n\r\n\r\n  }));\r\n\r\n\r\nfunction Square({ value, onClick }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <button   className={classes.root} onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\nReactDOM.render(<Square />, document.getElementById(\"root\"));\r\n\r\n\r\nfunction Restart({ onClick }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <button  className={classes.reset} onClick={onClick}>\r\n      Play again\r\n    </button>\r\n  );\r\n}\r\n\r\n\r\n\r\n\r\n\r\nfunction Game() {\r\n  const [ squares, setSquares ] = useState(Array(9).fill(null));\r\n  const [ isXNext, setIsXNext ] = useState(true);\r\n  \r\n  const winner = calculateWinner(squares);\r\n\r\n  function getStatus() {\r\n    \r\n    if (winner) {\r\n      \r\n\r\n      return \"Winner: \" + winner;\r\n    } else if (isBoardFull(squares)) {\r\n      return \"Draw!\";\r\n    } else {\r\n      return \"Next player: \" + (isXNext ? \"X\" : \"O\");\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n  return (\r\n    <React.Fragment> \r\n    <Container maxWidth=\"sm\" className=\"container\">\r\n      <Container className=\"game\">\r\n        <Container className=\"game-board\">\r\n          <Container className=\"board-row\">\r\n            {renderSquare(0)}\r\n            {renderSquare(1)}\r\n            {renderSquare(2)}\r\n          </Container>\r\n          <Container className=\"board-row\">\r\n            {renderSquare(3)}\r\n            {renderSquare(4)}\r\n            {renderSquare(5)}\r\n          </Container>\r\n          <Container className=\"board-row\">\r\n            {renderSquare(6)}\r\n            {renderSquare(7)}\r\n            {renderSquare(8)}\r\n          </Container>\r\n        </Container>\r\n        <Container className=\"game-info\">{getStatus()}</Container>\r\n        <Container className=\"restart-button\">{renderRestartButton()}</Container>\r\n      </Container>\r\n    </Container>\r\n  </React.Fragment>\r\n  );\r\n  \r\n\r\n  function renderRestartButton() {\r\n    return (\r\n      <Restart\r\n        onClick={() => {\r\n          setSquares(Array(9).fill(null));\r\n          setIsXNext(true);\r\n        }}\r\n      />\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={squares[i]}\r\n        onClick={() => {\r\n          if (squares[i] != null || winner != null) {\r\n            return;\r\n          }\r\n          const nextSquares = squares.slice();\r\n          nextSquares[i] = (isXNext ? \"X\" : \"O\");\r\n          setSquares(nextSquares);\r\n\r\n          setIsXNext(!isXNext); \r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n\r\n\r\n\r\n\r\nfunction calculateWinner(squares) {\r\n  const possibleLines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n \r\n  for (let i = 0; i < possibleLines.length; i++) {\r\n    const [a, b, c] = possibleLines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction isBoardFull(squares) {\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (squares[i] == null) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}